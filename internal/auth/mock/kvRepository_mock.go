// Code generated by MockGen. DO NOT EDIT.
// Source: kvRepository.go

// Package mock_auth is a generated GoMock package.
package mock_auth

import (
	models "basicLoginRest/internal/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockKVRepository is a mock of KVRepository interface.
type MockKVRepository struct {
	ctrl     *gomock.Controller
	recorder *MockKVRepositoryMockRecorder
}

// MockKVRepositoryMockRecorder is the mock recorder for MockKVRepository.
type MockKVRepositoryMockRecorder struct {
	mock *MockKVRepository
}

// NewMockKVRepository creates a new mock instance.
func NewMockKVRepository(ctrl *gomock.Controller) *MockKVRepository {
	mock := &MockKVRepository{ctrl: ctrl}
	mock.recorder = &MockKVRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKVRepository) EXPECT() *MockKVRepositoryMockRecorder {
	return m.recorder
}

// DeleteUser mocks base method.
func (m *MockKVRepository) DeleteUser(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockKVRepositoryMockRecorder) DeleteUser(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockKVRepository)(nil).DeleteUser), ctx, key)
}

// GetUserByID mocks base method.
func (m *MockKVRepository) GetUserByID(ctx context.Context, key string) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", ctx, key)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByID indicates an expected call of GetUserByID.
func (mr *MockKVRepositoryMockRecorder) GetUserByID(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockKVRepository)(nil).GetUserByID), ctx, key)
}

// SetUser mocks base method.
func (m *MockKVRepository) SetUser(ctx context.Context, key string, t int, user *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUser", ctx, key, t, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUser indicates an expected call of SetUser.
func (mr *MockKVRepositoryMockRecorder) SetUser(ctx, key, t, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUser", reflect.TypeOf((*MockKVRepository)(nil).SetUser), ctx, key, t, user)
}
