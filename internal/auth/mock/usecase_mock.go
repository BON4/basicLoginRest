// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_auth is a generated GoMock package.
package mock_auth

import (
	models "basicLoginRest/internal/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUCAuth is a mock of UCAuth interface.
type MockUCAuth struct {
	ctrl     *gomock.Controller
	recorder *MockUCAuthMockRecorder
}

// MockUCAuthMockRecorder is the mock recorder for MockUCAuth.
type MockUCAuthMockRecorder struct {
	mock *MockUCAuth
}

// NewMockUCAuth creates a new mock instance.
func NewMockUCAuth(ctrl *gomock.Controller) *MockUCAuth {
	mock := &MockUCAuth{ctrl: ctrl}
	mock.recorder = &MockUCAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUCAuth) EXPECT() *MockUCAuthMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockUCAuth) Delete(ctx context.Context, userID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUCAuthMockRecorder) Delete(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUCAuth)(nil).Delete), ctx, userID)
}

// GetByID mocks base method.
func (m *MockUCAuth) GetByID(ctx context.Context, userID uint) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, userID)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockUCAuthMockRecorder) GetByID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockUCAuth)(nil).GetByID), ctx, userID)
}

// LoginWithEmail mocks base method.
func (m *MockUCAuth) LoginWithEmail(ctx context.Context, email string, password []byte) (*models.UserWithToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginWithEmail", ctx, email, password)
	ret0, _ := ret[0].(*models.UserWithToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginWithEmail indicates an expected call of LoginWithEmail.
func (mr *MockUCAuthMockRecorder) LoginWithEmail(ctx, email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginWithEmail", reflect.TypeOf((*MockUCAuth)(nil).LoginWithEmail), ctx, email, password)
}

// LoginWithUsername mocks base method.
func (m *MockUCAuth) LoginWithUsername(ctx context.Context, username string, password []byte) (*models.UserWithToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginWithUsername", ctx, username, password)
	ret0, _ := ret[0].(*models.UserWithToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginWithUsername indicates an expected call of LoginWithUsername.
func (mr *MockUCAuthMockRecorder) LoginWithUsername(ctx, username, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginWithUsername", reflect.TypeOf((*MockUCAuth)(nil).LoginWithUsername), ctx, username, password)
}

// Register mocks base method.
func (m *MockUCAuth) Register(ctx context.Context, user *models.User) (*models.UserWithToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, user)
	ret0, _ := ret[0].(*models.UserWithToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockUCAuthMockRecorder) Register(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUCAuth)(nil).Register), ctx, user)
}

// Update mocks base method.
func (m *MockUCAuth) Update(ctx context.Context, user *models.User) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, user)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockUCAuthMockRecorder) Update(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUCAuth)(nil).Update), ctx, user)
}
